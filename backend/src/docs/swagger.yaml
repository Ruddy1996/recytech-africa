openapi: 3.0.0
info:
  title: Recytech API
  version: 1.0.0
  description: Documentation des routes de l'API Recytech

servers:
  - url: http://localhost:5000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "exemple@mail.com"
        full_name:
          type: string
          example: "Jean Dupont"
        is_active:
          type: boolean
          example: true
    
    Client:
      type: object
      properties:
        id:
          type: string
        nom:
          type: string
        email:
          type: string
        telephone:
          type: string
        type:
          type: string
        enum: [ecole, entreprise, collectivite, autre]
        localisation:
          type: string
        created_at:
          type: string
          format: date-time

    ClientInput:
      type: object
      required:
        - nom
        - type
      properties:
        nom:
          type: string
        email:
          type: string
        telephone:
          type: string
        type:
          type: string
          enum: [ecole, entreprise, collectivite, autre]
        localisation:
          type: string
    Contrat:
      type: object
      properties:
        id:
          type: string
        borne_id:
          type: string
        client_id:
          type: string
        date_debut:
          type: string
          format: date
        date_fin:
          type: string
          format: date
        montant:
          type: number
        statut:
          type: string
          enum: [en_cours, termine, resilie]
        created_at:
          type: string
          format: date-time

    ContratInput:
      type: object
      required:
        - borne_id
        - client_id
        - date_debut
      properties:
        borne_id:
          type: string
        client_id:
          type: string
        date_debut:
          type: string
          format: date
        date_fin:
          type: string
          format: date
        montant:
          type: number
        statut:
          type: string
          enum: [en_cours, termine, resilie]

    InterventionBorne:
      type: object
      properties:
        id:
          type: string
          format: uuid
        borne_id:
          type: string
          format: uuid
        type_intervention:
          type: string
          maxLength: 100
        description:
          type: string
        date_intervention:
          type: string
          format: date
        intervenant:
          type: string
          maxLength: 100
        statut:
          type: string
          enum: [planifiee, terminee]
        created_at:
          type: string
          format: date-time

    InterventionBorneCreate:
      type: object
      required:
        - date_intervention
      properties:
        borne_id:
          type: string
          format: uuid
        type_intervention:
          type: string
        description:
          type: string
        date_intervention:
          type: string
          format: date
        intervenant:
          type: string
        statut:
          type: string
          enum: [planifiee, terminee]

    InterventionBorneUpdate:
      type: object
      properties:
        borne_id:
          type: string
          format: uuid
        type_intervention:
          type: string
        description:
          type: string
        date_intervention:
          type: string
          format: date
        intervenant:
          type: string
        statut:
          type: string
          enum: [planifiee, terminee]
  
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Une erreur est survenue"

security:
  - bearerAuth: []

paths:

  /auth/register:
    post:
      summary: "Créer un nouvel utilisateur"
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                full_name:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: Utilisateur créé avec succès
        '400':
          description: Utilisateur déjà existant

  /auth/login:
    post:
      summary: "Connexion utilisateur"
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Identifiants invalides

  /api/auth/google:
    get:
      tags: [Authentification]
      summary: Authentification via Google
      responses:
        '302':
          description: Redirection vers Google

  /api/auth/google/callback:
    get:
      tags: [Authentification]
      summary: Callback Google
      responses:
        '200':
          description: Authentification réussie, renvoie un JWT

  /user/me:
    get:
      summary: "Récupérer le profil utilisateur"
      tags: [Utilisateur]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Informations utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé

    put:
      summary: "Mettre à jour le profil utilisateur"
      tags: [Utilisateur]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: Profil mis à jour
        '401':
          description: Non autorisé

  /user/link-nfc:
    post:
      summary: "Lié l'utilisateur avec carte NFC"
      tags: [Utilisateur]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Utilisateur lié avec carte NFC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé

  /api/user/update-password:
    put:
      tags: [Utilisateur]
      summary: Changer son mot de passe
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Mot de passe mis à jour
        '400':
          description: Mauvais mot de passe ou requête invalide
        '401':
          description: Non autorisé

  /api/user/reset-password:
    post:
      tags: [Utilisateur]
      summary: Réinitialiser son mot de passe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Lien envoyé
        '404':
          description: Email introuvable

  /api/admin/dashboard:
    get:
      tags: [Admin]
      summary: Accès au dashboard admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard affiché
        '401':
          description: Non autorisé
        '403':
          description: Accès refusé

  /api/admin/create-user:
    post:
      tags: [Admin]
      summary: Création d’un utilisateur
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - full_name
                - email
                - password
              properties:
                full_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: Utilisateur créé
        '400':
          description: Champs manquants
        '409':
          description: Email utilisé

  /api/admin/users:
    get:
      tags: [Admin]
      summary: Liste des utilisateurs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste renvoyée
        '401':
          description: Non autorisé
        '403':
          description: Accès interdit

  /api/admin/user/{id}:
    delete:
      tags: [Admin]
      summary: Supprimer un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Supprimé
        '404':
          description: Introuvable

  /api/admin/user/{id}/toggle-active:
    patch:
      tags: [Admin]
      summary: Activer/désactiver un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: État mis à jour
        '404':
          description: Utilisateur introuvable
  
  /api/logs:
    get:
      tags:
        - Logs
      summary: Obtenir les logs des utilisateurs (admin uniquement)
      description: |
        Récupère les logs des actions des utilisateurs. Accessible uniquement aux administrateurs.
      parameters:
        - in: query
          name: action
          schema:
            type: string
          description: Filtrer par type d'action (ex: LOGIN, REGISTER, UPDATE)
        - in: query
          name: user_id
          schema:
            type: string
          description: ID de l'utilisateur
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
          description: Date de début (ex: 2025-06-01T00:00:00Z)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
          description: Date de fin
        - in: query
          name: page
          schema:
            type: integer
          description: Numéro de page
        - in: query
          name: limit
          schema:
            type: integer
          description: Nombre d'éléments par page
      responses:
        '200':
          description: Liste des logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        user_id:
                          type: string
                        action:
                          type: string
                        metadata:
                          type: object
                        created_at:
                          type: string
                          format: date-time
        '403':
          description: Accès interdit (non-admin)
        '500':
          description: Erreur serveur


  /api/autorite/dashboard:
    get:
      tags: [Autorite]
      summary: Dashboard autorité
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard affiché
        '401':
          description: Non autorisé
        '403':
          description: Accès refusé
  
  /api/clients:
    get:
      tags:
        - Clients
      summary: Récupérer la liste des clients
      responses:
        '200':
          description: Liste des clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'

    post:
      tags:
        - Clients
      summary: Créer un nouveau client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInput'
      responses:
        '201':
          description: Client créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  /api/clients/{id}:
    get:
      tags:
        - Clients
      summary: Récupérer un client par ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Détails du client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client non trouvé

    put:
      tags:
        - Clients
      summary: Mettre à jour un client
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInput'
      responses:
        '200':
          description: Client mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client non trouvé

    delete:
      tags:
        - Clients
      summary: Supprimer un client
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client supprimé
        '404':
          description: Client non trouvé

  /api/contrats:
    get:
      tags:
        - Contrats
      summary: Liste des contrats de location de bornes
      responses:
        '200':
          description: Liste des contrats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contrat'

    post:
      tags:
        - Contrats
      summary: Créer un nouveau contrat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContratInput'
      responses:
        '201':
          description: Contrat créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contrat'

  /api/contrats/{id}:
    get:
      tags:
        - Contrats
      summary: Obtenir un contrat par ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contrat trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contrat'
        '404':
          description: Contrat non trouvé

    put:
      tags:
        - Contrats
      summary: Modifier un contrat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContratInput'
      responses:
        '200':
          description: Contrat mis à jour
        '404':
          description: Contrat non trouvé

    delete:
      tags:
        - Contrats
      summary: Supprimer un contrat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contrat supprimé
        '404':
          description: Contrat non trouvé

  /interventions_borne:
    get:
      summary: Liste des interventions borne
      tags:
        - InterventionsBorne
      responses:
        '200':
          description: Liste récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterventionBorne'

    post:
      summary: Créer une nouvelle intervention sur borne
      tags:
        - InterventionsBorne
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterventionBorneCreate'
      responses:
        '201':
          description: Intervention créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionBorne'

  /interventions_borne/{id}:
    get:
      summary: Détail d'une intervention borne
      tags:
        - InterventionsBorne
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Intervention trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionBorne'
        '404':
          description: Intervention non trouvée

    put:
      summary: Modifier une intervention borne
      tags:
        - InterventionsBorne
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterventionBorneUpdate'
      responses:
        '200':
          description: Intervention mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionBorne'
        '404':
          description: Intervention non trouvée

    delete:
      summary: Supprimer une intervention borne
      tags:
        - InterventionsBorne
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Intervention supprimée avec succès
        '404':
          description: Intervention non trouvée

  /interventions/borne/{borneId}:
    get:
       summary: Obtenir les interventions d'une borne
       tags: 
          - InterventionsBorne
       security:
         - bearerAuth: []
       parameters:
         - in: path
           name: borneId
           schema:
             type: string
           required: true
           description: ID de la borne
       responses:
         200:
           description: Liste des interventions de la borne  
  
  /interventions/filter:
     get:
       summary: Filtrer les interventions
       tags: 
          - InterventionsBorne
       security:
         - bearerAuth: []
       parameters:
         - in: query
           name: statut
           schema:
             type: string
           description: Statut de l'intervention (planifiee, terminee)
         - in: query
           name: intervenant
           schema:
             type: string
         - in: query
           name: type_intervention
           schema:
             type: string
       responses:
         200:
           description: Résultat du filtre
  
  /bornes:
    get:
      tags:
        - Bornes
      summary: Récupérer la liste de toutes les bornes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des bornes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Borne'
        '500':
          description: Erreur serveur

    post:
      tags:
        - Bornes
      summary: Créer une nouvelle borne
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorneInput'
      responses:
        '201':
          description: Borne créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borne'
        '500':
          description: Erreur serveur

  /bornes/filter:
    get:
      tags:
        - Bornes
      summary: Filtrer les bornes selon des critères dynamiques
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: statut
          schema:
            type: string
            enum: [active, inactive, maintenance]
          description: Statut de la borne
        - in: query
          name: type
          schema:
            type: string
            enum: [publique, ecole, entreprise]
          description: Type de la borne
        - in: query
          name: mode_acquisition
          schema:
            type: string
            enum: [vente, location]
          description: Mode d'acquisition
        - in: query
          name: client_id
          schema:
            type: string
            format: uuid
          description: Identifiant du client
      responses:
        '200':
          description: Résultat du filtrage
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Borne'
        '500':
          description: Erreur serveur

  /bornes/{id}:
    get:
      tags:
        - Bornes
      summary: Récupérer une borne par son ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Données de la borne
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borne'
        '404':
          description: Borne non trouvée
        '500':
          description: Erreur serveur

    put:
      tags:
        - Bornes
      summary: Mettre à jour une borne existante
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorneInput'
      responses:
        '200':
          description: Borne mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borne'
        '500':
          description: Erreur serveur

    delete:
      tags:
        - Bornes
      summary: Supprimer une borne
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Borne supprimée avec succès
        '500':
          description: Erreur serveur
